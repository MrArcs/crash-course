/* Grid Container  */
.grid-container {
  width: 95vw;
  height: 80vh;
  margin: 0 auto;
  background-color: whitesmoke;
  outline: 4px solid slateblue;

  /* Grid */
  display: grid;

  /* Grid Columns ➡️ */
  /* Define the number of columns (fixed width sizes in pixels) 👇🏼 */
  /* grid-template-columns: 200px 200px 200px; Defined 3 columns */

  /* Whenever we want to fill up undefined extra space we defined 👇🏼*/
  /* Set 4 columns with last column set to auto */
  /* grid-template-columns: 200px 200px 200px auto; */

  /* we can also defined in percentage value 👇🏼*/
  /* grid-template-columns: 10% 70% 20%; */

  /* css grid also comes packed with some special functions and keywords */
  /* when we want equal columns or rolls the preferred unit to use on our grid container is a new unit which is the fractional unit the fractional unit takes a fraction of the available space and divides it equally */

  /* we have three equal width columns of one fr 👇🏼*/
  /* grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr; */

  /* when we're using the same value as we are here we can use the repeat function 👇🏼*/
  /* repeat function take 2 values repeat(numberOfColumns, sizeOfColumns)*/
  /* grid-template-columns: repeat(2, 1fr); */

  /* Another special function we have access to is the min max function now this is really helpful enables us to specify a minimum value and a maximum value that we want our column to have */

  /* 1 column set to 1fr the 2 column take min value and max value 👇🏼*/
  /* grid-template-columns: 1fr minmax(320px, 1fr); */

  /* we've also got this extra space here let's say we wanted to fill the space in with 300 pixel columns as long as we had the space and as long as we had the items to fill them in we can do that by using another special value that we have in css grid which is the auto fill value 👇🏼*/

  /* So autofill keep adding the extra space with 300px if available even if there no elements */
  /* grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); */

  /* No additional columns or extra space get created like autofill does 👇🏼*/
  /* grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); */

  /* Naming our grid lines whether it's our column lines or our roll lines will become useful when it comes to moving our items around within our group container and that's done using a grid item property */

  /* Name the grid line with squareBrackets [] 👇🏼*/
  grid-template-columns: [col-start] 1fr [col-2] 1fr [col-3] 1fr [col-end] 1fr;

  /* Rows ↓ */
  /* grid-template-rows: 100px 50px; so we've explicitly defined a 100 pixel row and a 50 pixel row and so any subsequent roles will be implicitly defined these are known as implicit grid tracks */

  /* if we want to learn which are grid auto columns and grid auto rows */
  /* grid-auto-columns: ; */
  /* grid-auto-rows: 50px;  Implicit grid columns and rows */

  /* we also have grid auto flow and this works in a similar way to grid auto columns and roles in that it's all about how things are automatically placed inside our grid container */

  grid-template-columns: repeat(12, 1fr);

  /* Default value set to row. Basically means is whenever we have any new items inside a container place these items inside a container according to the row. 👇🏼*/
  /* grid-auto-flow: row; */

  /* Items are being placed inside the container according to the column 👇🏼*/
  /* grid-auto-flow: column; */

  /*  Item b has now moved to fill in this extra space that we had even though in our source order item b is placed after item */

  /* use with CAUTION because it will change the visual order of your items */
  /* grid-auto-flow: dense; */

  /* We can also define row-dense and column-dense to give us a bit more control as to how these items */
  /* grid-auto-flow: row-dense; */

  /* Set gaps in between our items */
  /* grid-template-columns: repeat(6, 1fr); */
  /* grid-column-gap: 10px;
  grid-row-gap: 10px; */

  /* Short hand for grid-column-gap and grid-row-gap */
  /* grid-gap: 10px; */

  /* Position Items with in the cell*/

  /* Align items positions our items vertically within the grid cell so by default this is set to stretch but we can change this to [start][center][end]  default set to = [stretch]*/
  /* grid-template-columns: repeat(3, 150px); */
  /* align-items: stretch; */
  /* align-items: end; */

  /* Justify items does the same thing but instead this is along the x-axis or horizontally [start][center][end] default set to = [stretch]*/
  /* justify-items: end; */

  /* Short hand for align-items and justify-items  */
  /* place-items: center; */
  /* place-items: center start; */

  /* Position Content with in the cell*/
  /* Position our entire content within the container we use align content justify content and place content */

  /* Align content is all about how we align our content vertically within our container and default set to = [start] and other properties are start - end - center - space-between - space-around - space-evenly*/
  /* align-content: center; */

  /* set content to horizontally default set to = [start] and other properties are start - end - center - space-between - space-around - space-evenly */
  /* justify-content: space-evenly; */

  /* Short hand for align-content and justify-content  */
  /* grid-template-columns: repeat(3, 150px); */
  /* place-content: center; */

  /* For grid template area */

  /* grid-template-columns: [col-start] 1fr [col-2] 1fr [col-3] 1fr [col-end];
  grid-auto-rows: 60px auto 100px;
  grid-template-areas:
    "header header header"
    "sidebar main main"
    "sidebar footer footer"; */

  /* Grid Template */

  /* grid template is a shorthand property for setting grid template rows grid template columns and grid template areas in a single declaration  */

  grid-template:
    "header header header" 60px
    "main main sidebar" auto
    "footer footer footer" 100px /
    [col-start] 1fr [col-2] 1fr [col-3] 1fr [col-end];

  /* Grid */

  /* explicit values or grid auto roles */
  grid-template-rows: 50px 200px;
  grid-template-columns: repeat(3, 1fr);

  /* implicit values */
  grid-auto-rows: 100px;
  grid-auto-flow: row;

  /* grid is a shorthand property for setting either grid template roles and grid template columns */

  /* first thing to know is that we can only specify one or the other in this shorthand we can only declare either our explicit values or our implicit values */

  /* This is explicit values */
  /* grid: rows / columns; 
        50px 200px / repeat(3, 1fr)  */

  /* This is implicit values */
  /* grid: rows      / columns;
        auto-flow  repeat(3, 1fr)  */

  /* Grid container properties ends */

  grid-template-columns: [col-start] 1fr [col-2] 1fr [col-3] 1fr [col-end];
  grid-auto-rows: 60px auto 100px;
  grid-template-areas:
    "header header header"
    "sidebar main main"
    "sidebar footer footer";
}

.header {
  grid-area: header;
}
.main {
  grid-area: main;
}
.sidebar {
  grid-area: sidebar;
}
.footer {
  grid-area: footer;
}

/* For grid-auto-flow-dense */
/* .a {
  /* items a and b have been pushed over column line 10 and column line 11 */
/* grid-column: 10/11; */
/* } * */

/* Grid item */

.one {
  grid-column-start: 1;
  grid-column-end: 4;
  grid-column-end: -1;
}

/* we can also define name */
.one {
  grid-column-start: col-start;
  grid-column-end: col-3;
}

/* we can also span */
.one {
  grid-column-start: col-start;
  grid-column-end: span 2;
}

/* we can also span */
.two {
  grid-row-start: 2;
  grid-row-end: 3;
}
